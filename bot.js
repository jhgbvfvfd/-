const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const axios = require('axios');
const { Telegraf } = require('telegraf');

const BOT_TOKEN = '8252745688:AAES1pAHGqYQMq32N8invkUNp8VC_rrCKZo';

const API_BASE = 'https://apikey-vip.netlify.app/api/apisms1';
const DATA_DIR = path.join(__dirname, 'data');
const STORAGE_FILE = path.join(DATA_DIR, 'keys.json');

function ensureDataDir() {
    if (!fs.existsSync(DATA_DIR)) {
        fs.mkdirSync(DATA_DIR, { recursive: true });
    }
}

function loadStorage() {
    ensureDataDir();
    try {
        const raw = fs.readFileSync(STORAGE_FILE, 'utf-8');
        const parsed = JSON.parse(raw);
        return {
            users: parsed.users || {},
            keys: parsed.keys || {},
        };
    } catch (error) {
        return { users: {}, keys: {} };
    }
}

const storage = loadStorage();

function persistStorage() {
    ensureDataDir();
    fs.writeFileSync(
        STORAGE_FILE,
        JSON.stringify(storage, null, 2),
        'utf-8'
    );
}

function getStoredKey(userId) {
    return storage.users[userId]?.apiKey || null;
}

function assignKeyToUser(userId, key, profile = {}) {
    const trimmedKey = key.trim();
    if (!trimmedKey) {
        throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)');
    }

    const owner = storage.keys[trimmedKey];
    if (owner && owner !== userId) {
        return { status: 'conflict', owner };
    }

    const currentKey = storage.users[userId]?.apiKey || null;

    if (currentKey && currentKey !== trimmedKey) {
        delete storage.keys[currentKey];
    }

    const timestamp = new Date().toISOString();

    storage.users[userId] = {
        apiKey: trimmedKey,
        profile,
        updatedAt: timestamp,
    };
    storage.keys[trimmedKey] = userId;

    persistStorage();

    if (currentKey === trimmedKey) {
        return { status: 'unchanged' };
    }

    return { status: currentKey ? 'updated' : 'created' };
}

const MAIN_MENU = {
    reply_markup: {
        keyboard: [
            [{ text: 'üöÄ ‡∏¢‡∏¥‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå' }],
            [{ text: 'üîê ‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå' }, { text: 'üßÆ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô' }],
        ],
        resize_keyboard: true,
    },
};

const bot = new Telegraf(BOT_TOKEN);
const sessions = new Map();

function getSession(ctx) {
    const id = ctx.from.id;
    if (!sessions.has(id)) {
        sessions.set(id, {
            apiKey: getStoredKey(id),
            step: null,
            pendingPhone: null,
            activeJob: false,
        });
    }
    return sessions.get(id);
}

function localizeApiMessage(message) {
    if (!message) {
        return null;
    }

    const text = typeof message === 'string' ? message : JSON.stringify(message);
    const normalized = text.trim();
    const lower = normalized.toLowerCase();

    if (lower.includes('platform is disabled')) {
        return '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á';
    }

    return normalized;
}

function formatAxiosError(error) {
    if (error.response && error.response.data) {
        const data = error.response.data;
        if (typeof data === 'string') {
            return localizeApiMessage(data) || data;
        }
        if (data.message) {
            return localizeApiMessage(data.message) || data.message;
        }
        if (data.error) {
            return localizeApiMessage(data.error) || data.error;
        }
        const serialized = JSON.stringify(data);
        return localizeApiMessage(serialized) || serialized;
    }
    if (error.request) {
        return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏î‡πâ';
    }
    return localizeApiMessage(error.message) || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏';
}

function extractRemainingTokens(data, seen = new Set()) {
    if (!data || typeof data !== 'object') {
        return null;
    }

    if (seen.has(data)) {
        return null;
    }
    seen.add(data);

    const possibleKeys = [
        'remaining',
        'balance',
        'credit',
        'credits',
        'tokens',
        'token',
        'tokens_remaining',
        'remaining_tokens',
        'token_balance',
        'quota',
    ];

    for (const key of possibleKeys) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
            const value = data[key];
            if (value === null || value === undefined) {
                continue;
            }
            if (typeof value === 'number') {
                return value;
            }
            if (typeof value === 'string' && value.trim() !== '') {
                const parsed = Number.parseFloat(value);
                return Number.isFinite(parsed) ? parsed : value.trim();
            }
        }
    }

    for (const value of Object.values(data)) {
        if (value && typeof value === 'object') {
            const nested = extractRemainingTokens(value, seen);
            if (nested !== null) {
                return nested;
            }
        }
    }

    return null;
}

function formatTokenSummary({ title, lead, remaining, fallbackNote }) {
    const lines = [];
    if (title) {
        lines.push(title);
    }
    if (lead) {
        lines.push(`üìù ${lead}`);
    }
    if (remaining !== null && remaining !== undefined) {
        const formatted =
            typeof remaining === 'number'
                ? remaining.toLocaleString('th-TH')
                : remaining;
        lines.push(`üí≥ ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${formatted}`);
    } else if (fallbackNote) {
        lines.push(`‚ö†Ô∏è ${fallbackNote}`);
    }
    return lines.join('\n');
}

async function useTokens(apiKey, tokens) {
    try {
        const { data } = await axios.post(
            `${API_BASE}/use`,
            { key: apiKey, tokens },
            { headers: { 'Content-Type': 'application/json' } }
        );
        if (data && (data.success === false || data.ok === false)) {
            throw new Error(data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏±‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏î‡πâ');
        }
        return data;
    } catch (error) {
        throw new Error(formatAxiosError(error));
    }
}

async function checkCredit(apiKey) {
    try {
        const { data } = await axios.get(`${API_BASE}/credit`, {
            params: { key: apiKey },
        });
        if (data && (data.success === false || data.ok === false)) {
            throw new Error(data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏î‡πâ');
        }
        return data;
    } catch (error) {
        throw new Error(formatAxiosError(error));
    }
}

function sanitizePhoneNumber(text) {
    return text.replace(/[^0-9]/g, '');
}

function runSmsBomb(phone, count) {
    return new Promise((resolve, reject) => {
        const child = spawn(process.execPath, [path.join(__dirname, 'sms.js'), phone, String(count)], {
            stdio: ['ignore', 'pipe', 'pipe'],
        });

        child.stdout.on('data', (data) => {
            console.log(`[sms.js stdout] ${data.toString().trim()}`);
        });

        child.stderr.on('data', (data) => {
            console.error(`[sms.js stderr] ${data.toString().trim()}`);
        });

        child.on('error', (error) => {
            reject(error);
        });

        child.on('close', (code) => {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error(`sms.js exited with code ${code}`));
            }
        });
    });
}

bot.start((ctx) => {
    const session = getSession(ctx);
    session.apiKey = getStoredKey(ctx.from.id) || session.apiKey;
    session.step = null;
    session.pendingPhone = null;
    const name = ctx.from?.first_name || ctx.from?.username || '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏Å';
    return ctx.reply(
        `ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${name}!\n` +
            '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‚ú®',
        MAIN_MENU
    );
});

bot.hears(['üîê ‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå', '‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå'], (ctx) => {
    const session = getSession(ctx);
    session.step = 'awaiting_key';
    session.pendingPhone = null;
    return ctx.reply('üîê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏ô‡∏∞)');
});

bot.hears(['üßÆ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô', '‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô', '‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'], async (ctx) => {
    const session = getSession(ctx);
    if (!session.apiKey) {
        session.apiKey = getStoredKey(ctx.from.id);
    }
    if (!session.apiKey) {
        return ctx.reply('‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î "üîê ‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå" ‡∏Å‡πà‡∏≠‡∏ô');
    }

    try {
        await ctx.reply('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì...');
        const credit = await checkCredit(session.apiKey);
        const remaining = extractRemainingTokens(credit);
        const summary = formatTokenSummary({
            title: 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô',
            lead:
                (credit && localizeApiMessage(credit.message)) ||
                '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
            remaining,
            fallbackNote: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤',
        });
        await ctx.reply(summary, MAIN_MENU);
    } catch (error) {
        await ctx.reply(`‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    }
});

bot.hears(['üöÄ ‡∏¢‡∏¥‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå', '‡∏¢‡∏¥‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå'], (ctx) => {
    const session = getSession(ctx);
    if (session.activeJob) {
        return ctx.reply('‚åõ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏¥‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞');
    }
    if (!session.apiKey) {
        session.apiKey = getStoredKey(ctx.from.id);
    }
    if (!session.apiKey) {
        return ctx.reply('‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î "üîê ‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå" ‡∏Å‡πà‡∏≠‡∏ô');
    }
    session.step = 'awaiting_phone';
    session.pendingPhone = null;
    return ctx.reply('üì± ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏¥‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)');
});

bot.on('text', async (ctx) => {
    const session = getSession(ctx);
    const text = ctx.message.text.trim();

    if (session.activeJob) {
        return ctx.reply('‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏¥‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô');
    }

    switch (session.step) {
        case 'awaiting_key': {
            try {
                const result = assignKeyToUser(ctx.from.id, text, {
                    firstName: ctx.from?.first_name || null,
                    username: ctx.from?.username || null,
                });
                if (result.status === 'conflict') {
                    await ctx.reply(
                        '‚õî ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                        MAIN_MENU
                    );
                    return;
                }

                session.apiKey = getStoredKey(ctx.from.id);
                session.step = null;
                session.pendingPhone = null;

                const statusMessage =
                    result.status === 'updated'
                        ? 'üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï API Key ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ üöÄ'
                        : result.status === 'unchanged'
                        ? '‚ÑπÔ∏è ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‚úÖ'
                        : '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å API Key ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ üöÄ';

                await ctx.reply(statusMessage, MAIN_MENU);
            } catch (error) {
                await ctx.reply(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
            }
            return;
        }
        case 'awaiting_phone': {
            const sanitized = sanitizePhoneNumber(text);
            if (!sanitized || sanitized.length < 8 || sanitized.length > 12) {
                await ctx.reply('‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 8-12 ‡∏´‡∏•‡∏±‡∏Å');
                return;
            }
            session.pendingPhone = sanitized;
            session.step = 'awaiting_count';
            await ctx.reply('üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á (1-10)');
            return;
        }
        case 'awaiting_count': {
            const count = Number.parseInt(text, 10);
            if (!Number.isInteger(count) || count < 1 || count > 10) {
                await ctx.reply('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-10');
                return;
            }

            try {
                await ctx.reply('ü™ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô...');
                const response = await useTokens(session.apiKey, count);
                let remaining = extractRemainingTokens(response);
                let leadMessage =
                    (response && localizeApiMessage(response.message)) ||
                    '‡∏´‡∏±‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!';

                if (remaining === null) {
                    try {
                        const latestCredit = await checkCredit(session.apiKey);
                        remaining = extractRemainingTokens(latestCredit);
                        if (!response?.message && latestCredit?.message) {
                            leadMessage =
                                localizeApiMessage(latestCredit.message) || leadMessage;
                        }
                    } catch (refreshError) {
                        console.error('Failed to refresh credit after deduction', refreshError);
                    }
                }

                const summary = formatTokenSummary({
                    title: '‚úÖ ‡∏´‡∏±‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                    lead: leadMessage,
                    remaining,
                    fallbackNote: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô',
                });
                await ctx.reply(summary, MAIN_MENU);

                const phone = session.pendingPhone;
                session.step = null;
                session.pendingPhone = null;
                session.activeJob = true;

                await ctx.reply(`üî• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏¥‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå ${phone} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
                try {
                    await runSmsBomb(phone, count);
                    await ctx.reply('üéâ ‡∏¢‡∏¥‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!', MAIN_MENU);
                } catch (error) {
                    await ctx.reply(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏¢‡∏¥‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${error.message}`);
                } finally {
                    session.activeJob = false;
                }
            } catch (error) {
                await ctx.reply(`‚ùå ‡∏´‡∏±‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
            }
            return;
        }
        default:
            break;
    }

    if (text.startsWith('/')) {
        return;
    }

    return;
});

bot.catch((err, ctx) => {
    console.error(`Bot error for ${ctx.updateType}`, err);
});

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
