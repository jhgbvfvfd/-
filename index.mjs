import puppeteer from "puppeteer-extra";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import TelegramBot from "node-telegram-bot-api";
import express from "express";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { createCursor } from "ghost-cursor";

// ===== CONFIG (‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) =====
const TELEGRAM_TOKEN = "8059700320:AAE3zoxq5Q-WyBfS5eeQTJtg7k3xacFw6I8"; // üîë Token ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
const ADMIN_CHAT_ID = "7905342409";    // üÜî Chat ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
const AI_API = "https://kaiz-apis.gleeze.com/api/gemini-vision";
const AI_KEY = "e62d60dd-8853-4233-bbcb-9466b4cbc265";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const IMG_DIR = path.join(__dirname, "public");
if (!fs.existsSync(IMG_DIR)) fs.mkdirSync(IMG_DIR);

const app = express();
app.use(express.static(IMG_DIR));
app.listen(4000, () => console.log("üñº Image server on http://localhost:4000/"));

puppeteer.use(StealthPlugin());
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// ===== üß† ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (State Management) =====
let botState = {
    browser: null,
    page: null,
    cursor: null,
    status: 'idle', // idle, awaiting_url, mission_active
};

// ===== Keyboards =====
const idleKeyboard = {
    reply_markup: {
        keyboard: [[{ text: "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà" }]],
        resize_keyboard: true,
        one_time_keyboard: true
    }
};
const missionActiveKeyboard = {
    reply_markup: {
        keyboard: [[{ text: "üõë ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à" }]],
        resize_keyboard: true,
        one_time_keyboard: true
    }
};

// ===== Utils & Core Actions =====
const delay = (ms) => new Promise((r) => setTimeout(r, ms));
const humanPause = (min = 300, max = 1200) => delay(min + Math.random() * (max - min));

async function sendSafePhoto(caption, filePath) {
    const cap = caption.length > 1020 ? caption.slice(0, 1020) + "..." : caption;
    try {
        await bot.sendPhoto(ADMIN_CHAT_ID, filePath, { caption: cap });
    } catch {
        await bot.sendMessage(ADMIN_CHAT_ID, cap);
        await bot.sendPhoto(ADMIN_CHAT_ID, filePath);
    } finally {
        try { fs.unlinkSync(filePath); } catch { }
    }
}

async function capture(page) {
    const filename = `screen-${Date.now()}.png`;
    const filePath = path.join(IMG_DIR, filename);
    await page.screenshot({ path: filePath, fullPage: false });
    return { filePath, url: `http://localhost:4000/${filename}` };
}

async function screenshot(page, note = "üì∏") {
    const { filePath } = await capture(page);
    await sendSafePhoto(note, filePath);
}

// ===== üß† [‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î!] ‡∏£‡∏∞‡∏ö‡∏ö AI-Vision & Element Interaction =====

/**
 * ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
 * ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà" ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ù‡∏±‡∏á ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
 */
async function getVisibleInteractiveElements(page) {
    return await page.evaluate(() => {
        const elements = document.querySelectorAll('a, button, input:not([type="hidden"]), textarea, [role="button"], [role="link"], select, [contenteditable="true"]');
        const visibleElements = [];
        let elementIdCounter = 0;

        for (const el of elements) {
            const style = window.getComputedStyle(el);
            const rect = el.getBoundingClientRect();
            const isVisible = style.visibility !== 'hidden' && style.display !== 'none' && rect.width > 0 && rect.height > 0 && rect.top >= 0 && rect.left >= 0 && rect.bottom <= window.innerHeight && rect.right <= window.innerWidth;

            if (isVisible) {
                let text = (el.innerText || el.textContent || el.value || el.placeholder || el.getAttribute('aria-label') || el.getAttribute('title') || '').trim().replace(/\s+/g, ' ');
                if (text.length > 100) text = text.substring(0, 100) + "...";
                
                const uniqueId = `pptr-gen-${elementIdCounter++}`;
                el.setAttribute('data-pptr-id', uniqueId);

                visibleElements.push({
                    id: uniqueId,
                    tag: el.tagName.toLowerCase(),
                    text: text,
                    ariaLabel: el.getAttribute('aria-label'),
                    placeholder: el.getAttribute('placeholder'),
                    type: el.getAttribute('type')
                });
            }
        }
        return visibleElements;
    });
}


/**
 * ‡∏ñ‡∏≤‡∏° AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Element ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡∏°‡∏≤
 */
async function askAIToChooseElement(userHint, elementType, elementsJSON) {
    const prompt = `You are an expert web automation assistant. Your task is to analyze a user's instruction and a JSON list of visible, interactive elements from a webpage. You must select the single best element to interact with. Consider the element's tag, text, accessibility labels (ariaLabel), and placeholder text to make the most accurate choice. Pay close attention to Thai language hints and text.

User's instruction: "${userHint}"
Desired element type: "${elementType}" (e.g., 'a button or link', 'an input field')

Here are the visible elements on the page:
${JSON.stringify(elementsJSON, null, 2)}

Respond with ONLY the 'id' of the best matching element. For example: "pptr-gen-5". If no element is a clear match, respond with "null".`;

    try {
        const response = await fetch(
            `${AI_API}?q=${encodeURIComponent(prompt)}&uid=puppeteer-genius-pro&imageUrl=&apikey=${AI_KEY}`
        );
        if (!response.ok) return null;
        const data = await response.json();
        let choice = (data.response || "null").replace(/["'`]/g, "").trim();
        return choice.startsWith("pptr-gen-") ? choice : null;
    } catch {
        return null;
    }
}


/**
 * ‡∏ñ‡∏≤‡∏° AI ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
 */
async function askAIToReadContent(page, question) {
    await bot.sendMessage(ADMIN_CHAT_ID, `üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "${question}"`);
    const { filePath, url } = await capture(page);

    try {
        const params = new URLSearchParams({
            q: question,
            uid: "puppeteer-reader",
            imageUrl: url,
            apikey: AI_KEY
        });
        const response = await fetch(`${AI_API}?${params.toString()}`);
        if (!response.ok) throw new Error('API request failed');
        const data = await response.json();
        await sendSafePhoto(`‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°: ${question}`, filePath);
        return data.response || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á";
    } catch (e) {
        await sendSafePhoto(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°: ${question}`, filePath);
        return `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${e.message}`;
    }
}


// ===== üß† AI Planner =====
async function getAIPlan(instruction) {
    const prompt = `You are a browser automation expert. Convert the user's request into a JSON array of steps. Your response MUST be ONLY the JSON array.
Available actions: "GOTO", "TYPE", "CLICK", "READ", "PRESS".
- 'hint' for TYPE, CLICK, READ should be the VISIBLE text, placeholder, or a description of the target.
- 'url' for GOTO must be a full, valid URL.
- 'question' for READ is what the user wants to know.
- 'key' for PRESS is the keyboard key (e.g., 'Enter').

Example 1 (English): User: Type Username tomsmith and Password SuperSecretPassword! then click "Login"
AI: [{"action": "TYPE", "hint": "Username", "value": "tomsmith"},{"action": "TYPE", "hint": "Password", "value": "SuperSecretPassword!"},{"action": "CLICK", "hint": "Login"}]

Example 2 (English): User: Go to google.com and search for "dogs" then press Enter
AI: [{"action": "GOTO", "url": "https://google.com"},{"action": "TYPE", "hint": "Search box", "value": "dogs"},{"action": "PRESS", "key": "Enter"}]

Example 3 (Thai): User: ‡πÑ‡∏õ‡∏ó‡∏µ‡πà facebook.com ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà email "test@test.com" ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô "pass123" ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"
AI: [{"action": "GOTO", "url": "https://facebook.com"},{"action": "TYPE", "hint": "Email", "value": "test@test.com"},{"action": "TYPE", "hint": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "value": "pass123"},{"action": "CLICK", "hint": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"}]

Example 4 (English): User: After logging in, find out what the account balance is
AI: [{"action": "READ", "question": "What is the account balance?"}]

Now, analyze this user request:
User: ${instruction}
AI:`;

    try {
        const response = await fetch(
            `${AI_API}?q=${encodeURIComponent(prompt)}&uid=puppeteer-pro-planner&imageUrl=&apikey=${AI_KEY}`
        );
        if (!response.ok) throw new Error(`API error: ${response.status} ${response.statusText}`);
        const data = await response.json();
        const jsonMatch = (data.response || "").match(/\[\s*\{[\s\S]*\}\s*\]/);
        if (!jsonMatch) throw new Error("AI did not return a valid JSON plan.");
        return JSON.parse(jsonMatch[0]);
    } catch (error) {
        console.error("AI Plan generation failed:", error);
        bot.sendMessage(ADMIN_CHAT_ID, `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å AI ‡πÑ‡∏î‡πâ: ${error.message}`);
        return null;
    }
}

// ===== üöÄ ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Execution Engine) =====

async function handleCommonOverlays(page) {
    const selectors = [
        '[id*="cookie"] button', '[class*="cookie"] button',
        '[aria-label*="close" i]', '[title*="close" i]',
        'button:has-text("Accept"), button:has-text("Allow"), button:has-text("‡∏ï‡∏Å‡∏•‡∏á"), button:has-text("‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")'
    ];
    for (const selector of selectors) {
        try {
            const elements = await page.$$(selector);
            for (const el of elements) {
                if (el && await el.isIntersectingViewport()) {
                    await bot.sendMessage(ADMIN_CHAT_ID, `ü™Ñ ‡∏û‡∏ö Pop-up/Cookie banner... ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏¥‡∏î...`);
                    await el.click({delay: 100});
                    await delay(1000);
                    return;
                }
            }
        } catch {}
    }
}

async function executePlan(page, instruction) {
    try {
        await bot.sendMessage(ADMIN_CHAT_ID, "üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...");
        const plan = await getAIPlan(instruction);

        if (!plan || !Array.isArray(plan)) {
            throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å AI ‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ú‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        }

        const planText = plan.map(s => `- ${s.action}: ${s.hint || s.url || s.question || s.key}`).join('\n');
        await bot.sendMessage(ADMIN_CHAT_ID, `‚úÖ **‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:**\n${planText}`);

        for (const [index, step] of plan.entries()) {
            await humanPause(800,1500);
            await handleCommonOverlays(page);
            await bot.sendMessage(ADMIN_CHAT_ID, `‚è≥ [${index+1}/${plan.length}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥: **${step.action}** "${step.hint || step.url || step.question || step.key}"...`);

            let elementId, elementHandle;

            switch (step.action.toUpperCase()) {
                case "TYPE":
                case "CLICK":
                    await bot.sendMessage(ADMIN_CHAT_ID, `ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á '‡∏°‡∏≠‡∏á‡∏´‡∏≤' ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...`);
                    const visibleElements = await getVisibleInteractiveElements(page);
                    if (visibleElements.length === 0) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡∏¢");
                    
                    const targetType = step.action.toUpperCase() === "TYPE" ? 'an input field' : 'a button or link';
                    elementId = await askAIToChooseElement(step.hint, targetType, visibleElements);

                    if (!elementId) {
                        await screenshot(page, `‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠: ${step.hint}`);
                        throw new Error(`AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${step.hint}" ‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏î‡πâ`);
                    }
                    
                    elementHandle = await page.$(`[data-pptr-id="${elementId}"]`);
                    if (!elementHandle) throw new Error(`‡∏û‡∏ö ID: ${elementId} ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö Element Handle ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô)`);
                    
                    await bot.sendMessage(ADMIN_CHAT_ID, `‚úÖ AI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${step.hint}" ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!`);
                    
                    await page.evaluate(el => el.scrollIntoView({ block: "center", behavior: "smooth" }), elementHandle);
                    await humanPause(300,600);
                    await page.evaluate(el => {
                        el.style.transition = 'all 0.3s ease';
                        el.style.boxShadow = '0 0 15px 5px rgba(0, 191, 255, 0.9)';
                        el.style.border = '3px solid #00BFFF';
                        el.style.borderRadius = '8px';
                    }, elementHandle);
                    await screenshot(page, `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞ ${step.action} ‡∏ó‡∏µ‡πà: "${step.hint}"`);
                    await humanPause(1000,1700);
                    await page.evaluate(el => { el.style.boxShadow = ''; el.style.border = ''; el.style.borderRadius = ''; }, elementHandle);

                    if (step.action.toUpperCase() === "TYPE") {
                        await botState.cursor.click(elementHandle);
                        const isContentEditable = await elementHandle.evaluate(el => el.isContentEditable);
                        if (isContentEditable) {
                            await elementHandle.evaluate(el => el.textContent = '');
                        } else {
                            await elementHandle.click({ clickCount: 3 });
                            await page.keyboard.press('Backspace');
                        }
                        await botState.page.keyboard.type(step.value, { delay: 50 + Math.random()*100 });
                    } else {
                        await botState.cursor.click(elementHandle);
                    }
                    break;

                case "GOTO":
                    if (!step.url || !/^https?:\/\//i.test(step.url)) throw new Error(`URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GOTO ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: "${step.url}"`);
                    await page.goto(step.url, { waitUntil: "domcontentloaded", timeout: 90000 });
                    botState.cursor = createCursor(page);
                    break;
                
                case "READ":
                    const answer = await askAIToReadContent(page, step.question);
                    await bot.sendMessage(ADMIN_CHAT_ID, `üí° **‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI:**\n${answer}`);
                    break;

                case "PRESS":
                    await page.keyboard.press(step.key);
                    await bot.sendMessage(ADMIN_CHAT_ID, `‚å®Ô∏è ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°: ${step.key}`);
                    break;
                
                default:
                    throw new Error(`‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å Action: ${step.action}`);
            }
            await page.waitForNetworkIdle({idleTime: 500, timeout: 10000}).catch(() => {
                console.log("Network idle timeout, continuing anyway.");
            });
        }
        return true;
    } catch (e) {
        await bot.sendMessage(ADMIN_CHAT_ID, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:\n\`\`\`\n${e.message}\n\`\`\``, { parse_mode: 'Markdown' });
        console.error(e);
        if (page) await screenshot(page, "‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡∏ì ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
        return false;
    }
}

// ===== üí¨ ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó (Chat Flow Controller) =====

async function endMission() {
    await bot.sendMessage(ADMIN_CHAT_ID, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå...");
    if (botState.browser) {
        await botState.browser.close().catch(e => console.error("Error closing browser:", e));
    }
    botState = { browser: null, page: null, cursor: null, status: 'idle' };
    await bot.sendMessage(ADMIN_CHAT_ID, "‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà", idleKeyboard);
}

bot.on("message", async (msg) => {
    const chatId = msg.chat.id.toString();
    if (chatId !== ADMIN_CHAT_ID) return;
    const text = (msg.text || "").trim();

    if (text === "/start" || text === "üõë ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à") {
        await endMission();
        return;
    }
    if (text === "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà") {
        if (botState.status !== 'idle') await endMission();
        botState.status = 'awaiting_url';
        await bot.sendMessage(chatId, "üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á URL **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô** ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:");
        return;
    }

    switch (botState.status) {
        case 'awaiting_url':
            if (!text.toLowerCase().startsWith('http')) {
                await bot.sendMessage(chatId, "URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á URL ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ http:// ‡∏´‡∏£‡∏∑‡∏≠ https://");
                return;
            }
            try {
                await bot.sendMessage(chatId, "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà URL ‡πÅ‡∏£‡∏Å...");
                botState.browser = await puppeteer.launch({ headless: "new", args: ["--no-sandbox", "--disable-setuid-sandbox", "--disable-dev-shm-usage"] });
                botState.page = (await botState.browser.pages())[0] || await botState.browser.newPage();
                await botState.page.setViewport({ width: 1366, height: 768 });
                botState.cursor = createCursor(botState.page);
                await botState.page.goto(text, { waitUntil: "domcontentloaded", timeout: 90000 });
                await screenshot(botState.page, `üì≤ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${text}`);
                botState.status = 'mission_active';
                await bot.sendMessage(chatId, "‚úÖ ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!\nüìù **‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢** (‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö')", missionActiveKeyboard);
            } catch (e) {
                await bot.sendMessage(chatId, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÑ‡∏î‡πâ:\n${e.message}`);
                await endMission();
            }
            break;

        case 'mission_active':
            const success = await executePlan(botState.page, text);
            if (success) {
                await screenshot(botState.page, "üéâ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
                const currentUrl = botState.page.url();
                await bot.sendMessage(chatId, `‚úÖ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüìç ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: \`${currentUrl}\`\n\nüìù **‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢** ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î "‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à"`, { ...missionActiveKeyboard, parse_mode: 'Markdown' });
            } else {
                await bot.sendMessage(chatId, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà", missionActiveKeyboard);
            }
            break;

        default:
            await bot.sendMessage(chatId, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î 'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", idleKeyboard);
            break;
    }
});


console.log("ü§ñ Telegram Bot v5.2 (Genesis Pro Plus) is running...");
bot.sendMessage(ADMIN_CHAT_ID, "‚úÖ ‡∏ö‡∏≠‡∏ó (v5.2 Genesis Pro Plus) ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!", idleKeyboard).catch(err => {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô!");
    console.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ TELEGRAM_TOKEN ‡πÅ‡∏•‡∏∞ ADMIN_CHAT_ID ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà");
    console.error("Error Details:", err.response?.body || err.message);
});

